<?php
/**
 * MoodleRest
 *
 * MoodleRest is a class to query Moodle REST webservices
 *
 * @package    MoodleRest
 * @version    1.0.1
 * @author     Lawrence Lagerlof <llagerlof@gmail.com>
 * @copyright  2018 Lawrence Lagerlof
 * @link       http://github.com/llagerlof/MoodleRest
 * @license    https://opensource.org/licenses/MIT MIT
 */
class MoodleRest
{
    /**
     * The full server address to Moodle REST webservices.
     * @access private
     */
    private $server_address;

    /**
     * The Moodle webservice token
     * @access private
     */
    private $token;

    /**
     * The return format (json, xml, array)
     * @access private
     */
    private $return_format = 'json'; // or xml

    /**
     * The RAW return data (as returned by the request. could be json or xml)
     * @access private
     */
    private $request_return;

    /**
     * The PARSED return data (could be json, xml or array)
     * @access private
     */
    private $parsed_return;

    /**
     * The full URL used to access the webservice
     * @access private
     */
    private $full_url;

    /**
     * The header string to be used in header() output
     * @access private
     */
    private $output_header;

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Set the full server address to Moodle REST webservices
     *
     * @param string $server_address The server address. eg:
     */
    public function setServerAddress($server_address) // eg: Eg: http://127.0.0.1/moodle/webservice/rest/server.php
    {
        $this->server_address = $server_address;
        return $this;
    }

    /**
     * Get the server address to Moodle REST webservices
     */
    public function getServerAddress()
    {
        return $this->server_address;
    }

    /**
     * Set the Moodle token to access Moodle REST webservices
     *
     * @param string $token The oken generated by Moodle admin
     */
    public function setToken($token)
    {
        $this->token = $token;
        return $this;
    }

    /**
     * Get the Moodle token
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * Set the return format (json, xml or array)
     *
     * @param string $return_format The return format (json, xml or array)
     */
    public function setReturnFormat($return_format) // json, xml, array
    {
        if ($return_format <> 'json' && $return_format <> 'xml' && $return_format <> 'array') {
            trigger_error("Invalid return format: '$return_format'", E_USER_WARNING);
        }
        $this->return_format = $return_format;
        return $this;
    }

    /**
     * Get the return format
     */
    public function getReturnFormat()
    {
        return $this->return_format;
    }

    /**
     * Store the return data
     *
     * @param string $request_return The returned data made by request() method
     */
    private function setRawData($request_return)
    {
        $this->request_return = $request_return;
    }

    /**
     * Get the returned data previously made by request() method
     */
    public function getRawData()
    {
        return $this->request_return;
    }

    /**
     * Store the parsed return data
     *
     * @param string $parsed_return The parsed returned data made by request() method
     */
    private function setData($parsed_return)
    {
        $this->parsed_return = $parsed_return;
    }

    /**
     * Get the parsed returned data previously made by request() method
     */
    public function getData()
    {
        return $this->parsed_return;
    }

    /**
     * Store the full URL when querying the server
     *
     * @param string $full_url The parsed returned data made by request() method
     */
    private function setFullUrl($full_url)
    {
        $this->full_url = $full_url;
    }

    /**
     * Get the full URL stored when the query was made
     */
    public function getFullUrl()
    {
        return $this->full_url;
    }

    /**
     * Store the output header string
     *
     * @param string $output_header The parsed returned data made by request() method
     */
    private function setHeader($output_header)
    {
        $this->output_header = $output_header;
    }

    /**
     * Get the full URL stored when the query was made
     */
    public function getHeader()
    {
        return $this->output_header;
    }

    /**
     * Output the json or xml header based on the value of $this->return_format
     */
    public function outputHeader()
    {
        if ($this->getReturnFormat() == 'json') {
            $this->setHeader('Content-Type: application/json');
            header('Content-Type: application/json');
        } elseif ($this->getReturnFormat() == 'xml') {
            $this->setHeader('Content-Type: application/xml');
            header('Content-Type: application/xml');
        }

        return $this;
    }

    /**
     * Output the result using echo if json or xml, or print_r if is array
     */
    public function outputResult()
    {
        if (($this->getReturnFormat() == 'json') || ($this->getReturnFormat() == 'xml')) {
            if (empty($this->output_header)) {
                if ($this->getReturnFormat() == 'json') {
                    header('Content-Type: application/json');
                } elseif ($this->getReturnFormat() == 'xml') {
                    header('Content-Type: application/xml');
                }
            }
            echo $this->getData();
        } else {
            if (is_array($this->getData())) echo "<pre>\n";
            print_r($this->getData());
            if (is_array($this->getData())) echo '</pre>';
        }

        return $this;
    }

    /**
     * Make the request
     *
     * @param string $function A Moodle function
     * @param array $parameters The parameters to be passed to the Moodle function. eg: array('groupids' => array(1,2)) | This translates as "groupids[0]=1&groupids[1]=2" in URL
     */
    public function request($function, $parameters)
    {
        $fatal = 0;
        if (empty($this->server_address)) {
            trigger_error('Empty server address. Use setServerAddress()', E_USER_WARNING);
            $fatal = 1;
        }
        if (empty($this->token)) {
            trigger_error('Empty token. Use setToken()', E_USER_WARNING);
            $fatal = 1;
        }
        if (empty($this->return_format)) {
            trigger_error('Empty return format. Use setReturnFormat()', E_USER_WARNING);
            $fatal = 1;
        }
        if (empty($function)) {
            trigger_error('Empty function. Fill the first parameter of request()', E_USER_WARNING);
            $fatal = 1;
        }
        if (!is_array($parameters) || empty($parameters)) {
            trigger_error('The second parameter of request() should not be an empty array', E_USER_WARNING);
            $fatal = 1;
        }
        if ($fatal) {
            trigger_error('Fix above errors and try again', E_USER_ERROR);
        }

        if ($this->getReturnFormat() == 'array' || $this->getReturnFormat() == 'json') {
            $return_format = 'json';
        } else {
            $return_format = 'xml';
        }

        $query_string = http_build_query($parameters);
        $this->setFullUrl(
            $this->getServerAddress() .
            '?wstoken=' . $this->getToken() .
            '&moodlewsrestformat=' . $return_format .
            '&wsfunction=' . $function .
            '&' . $query_string
        );

        $moodle_request = file_get_contents($this->getFullUrl());

        $this->setRawData($moodle_request);

        if ($this->getReturnFormat() == 'array') {
            $this->setData(json_decode($moodle_request, true));
        } else {
            $this->setData($moodle_request);
        }

        return $this;
    }
}


// EXAMPLES:
/*
$ip = '127.0.0.1';
$moodle_folder = 'moodle';
*/


// Example 1: Two requests using the same object, returns array
/*
$MoodleRest = new MoodleRest();
$MoodleRest->setServerAddress("http://$ip/$moodle_folder/webservice/rest/server.php");
$MoodleRest->setToken('8f12e614dae30735260a045313caa400');
$MoodleRest->setReturnFormat('array');
$result1 = $MoodleRest->request('core_group_get_groups', array('groupids' => array(1,2)))->getData(); // groupids[0]=1&groupids[1]=2

echo "<pre>result1:\n".print_r($result1, true)."</pre>";

$params = array('userlist' => array(array('userid' => 5, 'courseid' => 2), array('userid' => 4, 'courseid' => 2))); //userlist[0][userid]=5&userlist[1][userid]=4&userlist[0][courseid]=2&userlist[1][courseid]=2
$result2 = $MoodleRest->request('core_user_get_course_user_profiles', $params)->getData();

echo "<pre>result2:\n".print_r($result2, true)."</pre>";
*/


// Example 2: Returning a json object
/*
$MoodleRest = new MoodleRest();
$MoodleRest->setServerAddress("http://$ip/$moodle_folder/webservice/rest/server.php");
$MoodleRest->setToken('8f12e614dae30735260a045313caa400');
$MoodleRest->setReturnFormat('json');
$json = $MoodleRest->request('core_group_get_groups', array('groupids' => array(1,2)))->getData();
$MoodleRest->outputHeader();

echo $json;
*/


// Example 3: Returning a xml object using method chaining. It generates the header so the user can manually output the result with just an echo.
//            The method outputHeader() can be omitted if the user wants manually output the header before calling echo
/*
$xml =
    (new MoodleRest())->setServerAddress("http://$ip/$moodle_folder/webservice/rest/server.php")->
    setToken('8f12e614dae30735260a045313caa400')->
    setReturnFormat('xml')->request('core_group_get_groups', array('groupids' => array(1,2)))->outputHeader()->getData();

echo $xml;
*/


// Example 4: Direct output a json
/*
(new MoodleRest())->setServerAddress("http://$ip/$moodle_folder/webservice/rest/server.php")->
setToken('8f12e614dae30735260a045313caa400')->
setReturnFormat('json')->request('core_group_get_groups', array('groupids' => array(1,2)))->outputHeader()->outputResult();
*/


// Example 5: Direct output an array (outputHeader() can be left out)
/*
(new MoodleRest())->setServerAddress("http://$ip/$moodle_folder/webservice/rest/server.php")->
setToken('8f12e614dae30735260a045313caa400')->
setReturnFormat('array')->request('core_group_get_groups', array('groupids' => array(1,2)))->outputResult();
*/
